@page "/plan-accurals/{OsiId:int}"

@using Models.Db
@using Models.Responses
@using Radzen
@inject IOsiSvc osiSvc
@inject IPlanAccuralSvc planSvc
@inject ITransactionSvc tranSvc
@inject Radzen.DialogService dialogService
@attribute [Authorize]

<PageTitle Value=@("Планы начислений " + osiName) />

<SpinLoader IsLoading="IsLoading" Spinner="SpinnerType.Chase">
    <LoadingTemplate>
        <div class="col-sm-12" style="vertical-align: middle">
            <br /><br />
            <Chase Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <h3>@("Планы начислений " + osiName)</h3>
        <DxDataGrid @ref="grid"
                    Data="@planAccurals"
                    SelectionMode="DevExpress.Blazor.DataGridSelectionMode.None"
                    ShowFilterRow="true"
                    PageSize="300"
                    CssClass="mw-1100">
            <Columns>
                <DxDataGridColumn Field="@nameof(PlanAccural.Id)"
                                  Caption="Id"
                                  Width="50px">
                    <DisplayTemplate>
                        <a href="" @onclick="@(e => ShowDataForm((context as PlanAccural).Id))" @onclick:preventDefault>@((context as PlanAccural).Id)</a>
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridDateEditColumn Field="@nameof(PlanAccural.BeginDate)" DisplayFormat="dd.MM.yyyy"
                                          Caption="Дата"
                                          Width="100px">
                </DxDataGridDateEditColumn>
                <DxDataGridCheckBoxColumn Field="@nameof(PlanAccural.AccuralCompleted)"
                                          Caption="Начислено"
                                          Width="100px">
                </DxDataGridCheckBoxColumn>
                <DxDataGridCheckBoxColumn Field="@nameof(PlanAccural.UssikingIncluded)"
                                          Caption="Вкл.в тариф"
                                          Width="50px">
                </DxDataGridCheckBoxColumn>
                <DxDataGridColumn Caption=""
                                  Width="100px"
                                  AllowFilter="false"
                                  AllowSort="false"
                                  AllowGroup="false">
                    <DisplayTemplate>
                        <a href="" @onclick="@(async (e) => await CreateAccurals((context as PlanAccural).Id))" @onclick:preventDefault>Сделать начисления</a>
                    </DisplayTemplate>
                </DxDataGridColumn>
                <DxDataGridColumn Caption=""
                                  Width="100px"
                                  AllowFilter="false"
                                  AllowSort="false"
                                  AllowGroup="false">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary" Size="Size.ExtraSmall">
                                Ссылки
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem><a href=@("/plan-accural-acts/" + (context as PlanAccural).Id) target="_blank">Акты</a></DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DxDataGridColumn>
            </Columns>
        </DxDataGrid>
    </ContentTemplate>
</SpinLoader>

@code {
    [Parameter]
    public int OsiId { get; set; }

    private IList<PlanAccural> planAccurals;

    private DxDataGrid<PlanAccural> grid;
    private bool IsLoading = true;
    private string osiName = "";

    protected override void OnInitialized()
    {
        dialogService.OnClose += CloseDialogEvent;
    }

    void CloseDialogEvent(dynamic result)
    {
        if (result != null)
        {
            if (result is PlanAccural model)
            {
                var old = planAccurals.FirstOrDefault(u => u.Id == model.Id);
                if (old != null)
                {
                    var index = planAccurals.IndexOf(old);
                    planAccurals[index] = model;
                }
                else
                {
                    planAccurals.Add(model);
                }
                grid.Refresh().GetAwaiter();
                StateHasChanged();
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadData()
    {
        IsLoading = true;
        await Task.Delay(100);
        osiName = (await osiSvc.GetOsiById(OsiId))?.Name;
        planAccurals = (await planSvc.GetPlanAccuralsByOsiId(OsiId)).ToList();
        IsLoading = false;
        StateHasChanged();
    }


    void ShowDataForm(int id)
    {
        Dictionary<string, object> pars = new Dictionary<string, object>() { { "PlanAccuralId", id } };
        dialogService.Open<PlanAccuralData>((id == 0) ? "Добавление данных" : "Изменение данных", pars, new DialogOptions()
        {
            Width = "700px",
            Height = "auto",
            Left = "calc(50% - 350px)",
            Top = "calc(50% - 300px)"
        });
    }

    private async Task CreateAccurals(int planAccuralId)
    {
        IsLoading = true;
        await Task.Delay(100);
        try
        {
            await tranSvc.CreateAccuralsByPlanId(planAccuralId);
            var plan = planAccurals.FirstOrDefault(u => u.Id == planAccuralId);
            if (plan != null)
            {
                grid.Refresh().GetAwaiter();
            }
        }
        catch (Exception ex)
        {
            ShowDebug(ex.Message, "Ошибка");
        }
        IsLoading = false;
        StateHasChanged();
    }

    void ShowDebug(string message, string title = null, int width = 0, int height = 0)
    {
        dialogService.Open<Debug>(title == null ? "Сообщение" : title, new Dictionary<string, object>
        {
            ["data"] = message
        }, new DialogOptions() { Width = width == 0 ? "950px" : width.ToString() + "px", Height = height == 0 ? "auto" : height.ToString() + "px" });
    }
}