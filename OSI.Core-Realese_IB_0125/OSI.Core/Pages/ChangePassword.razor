@using Models
@using Radzen
@inject IUserSvc userSvc
@inject Radzen.DialogService dialogService
@inject NotificationService NotificationService

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<RadzenTemplateForm Data="userChangePassword" Submit="@(async (Models.Requests.ChangePasswordRequest arg) => await Submit())">
    <DataAnnotationsValidator />
    <DbExceptionValidator @ref="validator" />
    <div class="row">
        <div class="col-md-12">
            <RadzenLabel Text="Старый пароль" />
            <RadzenPassword style="width: 100%" @bind-Value="@userChangePassword.OldPassword" />
            @*<ValidationMessage For="@(() => userChangePassword.OldPassword)" />*@
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <RadzenLabel Text="Новый пароль" />
            <RadzenPassword style="width: 100%" @bind-Value="@userChangePassword.NewPassword" />
            @*<ValidationMessage For="@(() => userChangePassword.NewPassword)" />*@
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <RadzenLabel Text="Подтверждение пароля" />
            <RadzenPassword style="width: 100%" @bind-Value="@userChangePassword.ConfirmPassword" />
            @*<ValidationMessage For="@(() => userChangePassword.ConfirmPassword)" />*@
        </div>
    </div>
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <div class="row justify-content-end">
        <div class="col-md-12 d-flex align-items-end justify-content-end" style="margin-top: 16px;">
            <Button Color="Color.Primary" Type="Blazorise.ButtonType.Submit" class="mr-1">Сохранить</Button>
            <Button Color="Color.Secondary" Clicked="@Cancel">Отмена</Button>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public int UserId { get; set; }

    private bool isProcess = false;
    private bool IsProcess
    {
        set
        {
            isProcess = value;
            StateHasChanged();
        }
    }

    private Models.Requests.ChangePasswordRequest userChangePassword = new Models.Requests.ChangePasswordRequest();
    private DbExceptionValidator validator;
    private Microsoft.AspNetCore.Components.Forms.ValidationSummary summaryValidator;
    private bool showSummary = false;

    async Task Submit()
    {
        try
        {
            IsProcess = true;
            await userSvc.ChangePassword(UserId, userChangePassword);
            IsProcess = false;
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Detail = "Пароль успешно изменен", Duration = 3000 });
            dialogService.Close(userChangePassword);
        }
        catch (Exception ex)
        {
            IsProcess = false;
            validator.DisplayErrors(ex, false);
        }
    }

    void Cancel()
    {
        dialogService.Close(null);
    }
}
