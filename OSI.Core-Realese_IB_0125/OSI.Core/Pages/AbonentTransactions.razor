@page "/abonent-transactions/{AbonentId:int}"

@using Models.Db
@using Models.Responses
@using Radzen
@inject ITransactionSvc transactionSvc
@inject IAbonentSvc abonentSvc
@inject Radzen.DialogService dialogService
@attribute [Authorize]

<PageTitle Value=@("Операции абонента " + abonentInfo) />
<div class="row mb-3">
    <div class="col-md-2">
        <RadzenLabel Text="Начало периода" />
        <RadzenDatePicker style="width: 100%" DateFormat="d" @bind-Value="@date1" />
    </div>
    <div class="col-md-2">
        <RadzenLabel Text="Конец периода" />
        <RadzenDatePicker style="width: 100%" DateFormat="d" @bind-Value="@date2" />
    </div>
</div>
<div class="row mb-2">
    <div class="col-md-2">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Поиск" Click="(async () => await LoadData())" />
    </div>
</div>
<div class="row mb-2">
    <div class="col-md-2">
        <RadzenLabel Style="font-size: 24px; font-weight: bold" Text=@($"Итого сумма: {Total.ToString()}") />
    </div>
</div>
<div class="row mb-2">
    <div class="col-md-2">
        <RadzenCheckBox @bind-Value=@calcBeginSaldo Name="CheckBox2" TriState="false" TValue="bool" Change=@(args => CalcBeginSaldo()) />
        <RadzenLabel Text="Посчитать сальдо до этой даты" Style="margin-left: 5px" Component="CheckBox2" />
    </div>
</div>
<SpinLoader IsLoading="IsLoading" Spinner="SpinnerType.Chase">
    <LoadingTemplate>
        <div class="col-sm-12" style="vertical-align: middle">
            <br /><br />
            <Chase Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <h3>@("Операции абонента " + abonentInfo)</h3>

        <DxDataGrid @ref="grid"
                    Data="@transactions"
                    SelectionMode="DevExpress.Blazor.DataGridSelectionMode.MultipleSelectedDataRows"
                    SelectAllMode="DataGridSelectAllMode.AllPages"
                    @bind-MultipleSelectedDataRows="@SelectedTransactions"
                    PageSize="300"
                    CssClass="mw-1100">
            <Columns>
                <DxDataGridSelectionColumn Width="50px"></DxDataGridSelectionColumn>
                <DxDataGridColumn Field="@nameof(Transaction.Amount)"
                                  Caption="Сумма"
                                  Width="50px">
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(Transaction.Dt)"
                                  Caption="Дата"
                                  SortOrder="DataGridColumnSortOrder.Ascending"
                                  SortIndex="1"
                                  Width="80px">
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(Transaction.TransactionType)"
                                  Caption="Операция"
                                  Width="50px">
                </DxDataGridColumn>
                <DxDataGridColumn Field="Group.NameRu"
                                  Caption="Группа"
                                  Width="100px">
                </DxDataGridColumn>
                <DxDataGridColumn Field="OsiService.Service.NameRu"
                                  Caption="Услуга"
                                  Width="100px">
                </DxDataGridColumn>
                <DxDataGridColumn Field="@nameof(Transaction.Id)"
                                  Caption="Id"
                                  Width="50px">
                </DxDataGridColumn>
            </Columns>
        </DxDataGrid>
    </ContentTemplate>
</SpinLoader>

@code {
    [Parameter]
    public int AbonentId { get; set; }

    private Abonent abonent;
    private DateTime date1;
    private DateTime date2;
    private decimal Total = 0m;
    private IList<Transaction> transactions;
    IEnumerable<Transaction> selectedTransactions;
    IEnumerable<Transaction> SelectedTransactions
    {
        get { return selectedTransactions; }
        set
        {
            selectedTransactions = value;
            //Total += selectedTransactions.Sum(t => t.Amount);
            ChangeTotal();
            InvokeAsync(StateHasChanged);
        }
    }

    private DxDataGrid<Transaction> grid;
    private bool IsLoading = true;
    private string abonentInfo = "";
    private bool calcBeginSaldo = false;
    private EndSaldoResponse beginSaldo;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DateTime today = DateTime.Today;
            date1 = new DateTime(today.Year, today.Month, 1);
            date2 = today;
            await LoadData();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadData()
    {
        IsLoading = true;
        await Task.Delay(100);
        abonent = await abonentSvc.GetAbonentById(AbonentId);
        abonentInfo = abonent?.Name + ", кв: " + abonent?.Flat + ", id: " + abonent?.Id;
        transactions = (await transactionSvc.GetTransactionsByAbonentId(AbonentId, date1, date2)).ToList();
        beginSaldo = await transactionSvc.GetEndSaldoOnDateByAbonentId(date1.AddDays(-1), AbonentId);
        ChangeTotal();
        IsLoading = false;
        StateHasChanged();
    }

    void ShowDebug(string message, string title = null, int width = 0, int height = 0)
    {
        dialogService.Open<Debug>(title == null ? "Сообщение" : title, new Dictionary<string, object>
        {
            ["data"] = message
        }, new DialogOptions() { Width = width == 0 ? "950px" : width.ToString() + "px", Height = height == 0 ? "auto" : height.ToString() + "px" });
    }

    void ChangeTotal()
    {
        Total = calcBeginSaldo ? (beginSaldo?.TotalDebt ?? 0) + (selectedTransactions?.Sum(t => t.Amount) ?? 0) : selectedTransactions?.Sum(t => t.Amount) ?? 0;
    }

    void CalcBeginSaldo()
    {
        ChangeTotal();
        StateHasChanged();
    }
}
